from cmu_graphics import *
from PIL import Image, ImageDraw
import random
import copy
import math

#Obstacle Class to store the dimensions and coordinates of obstacles
class Obstacle:
    def __init__(self,x,y):
        widthChoices = [380,192]
        heightChoices = [15,25]
        self.x = x
        self.y = y
        self.width = random.choice(widthChoices)
        if self.width==380:
            self.height = 25
        else:
            self.height = 15
    # function needed to make obstacles move
    def move(self,speed):
        self.y+=speed

def onAppStart(app):
    newGame(app)

def newGame(app):
    app.image = Image.open('chapel.png')
    newWidth, newHeight = (app.image.width//2, app.image.height//2)
    app.imageScaled = app.image.resize((newWidth,newHeight))
    app.imageScaled = CMUImage(app.imageScaled)

    app.image2 = Image.open('idol.png')
    newWidth, newHeight = (app.image.width//12, app.image.height//11)
    app.imageScaled2 = app.image2.resize((newWidth,newHeight))
    app.imageScaled2 = CMUImage(app.imageScaled2)

    app.image3 = Image.open('wall.jpeg')
    newWidth, newHeight = (app.image.width//2, app.image.height//2)
    app.imageScaled3 = app.image3.resize((newWidth,newHeight))
    app.imageScaled3 = CMUImage(app.imageScaled3)

    app.image4 = Image.open('demonface.png')
    newWidth, newHeight = (app.image.width//6, app.image.height//6)
    app.imageScaled4 = app.image4.resize((newWidth,newHeight))
    app.imageScaled4 = CMUImage(app.imageScaled4)


    #gif code for ocean background
    myGif = Image.open('ocean.gif')
    app.spriteList = []
    for frame in range(myGif.n_frames):
        myGif.seek(frame)
        fr = myGif.resize((myGif.size[0], myGif.size[1]))
        fr = fr.transpose(Image.FLIP_LEFT_RIGHT)
        fr = CMUImage(fr)
        app.spriteList.append(fr)

    app.width = 380
    app.height = 250
    app.spriteCounter = 0
    app.gameOver = False
    app.scrollObstacle = 7
    app.jumping = False
    app.playerHeight = 50
    app.playerWidth = 30
    app.index = 0
    app.obstacles = []
    app.stepsPerSecond = 10
    app.speedCounter = 0
    app.player_x = app.width//2 - app.playerWidth//2
    app.player_y = app.height//1.5 - app.playerHeight//2
    app.distance_cm = 0
    app.distance_m = 0
    app.score = 0
    app.coins = 0
    app.slowedDown = False
    app.slowCount = 0
    app.showObstacles = True
    app.obstacleCounter = 0
    app.turnCount = 0
    app.turnPoints = []
    app.scrollTurn = 7
    app.isTurn = False
    app.startTurn = False
    app.direction = None
    app.playerTurn = False
    app.swivel = False
    app.startSwivel = False
    app.swivelPoints = []
    app.swivelCount = 0
    app.degrees = 0

    app.rx1 = app.width/3
    app.ry1 = 0
    app.rx2 = app.width
    app.ry2 = 0
    app.rx3 = app.width
    app.ry3 = 70
    app.rx4 = 270
    app.ry4 = 70
    app.rx5 = 320
    app.ry5 = app.height
    app.rx6 = 60
    app.ry6 = app.height

    app.lx1 = 0
    app.ly1 = 0
    app.lx2 = (2*app.width)/3
    app.ly2 = 0
    app.lx3 = 320
    app.ly3 = app.ly2+app.height
    app.lx4 = 60
    app.ly4 = app.ly2+app.height
    app.lx5 = 110
    app.ly5 = 70+app.ly1
    app.lx6 = 0
    app.ly6 = 70+app.ly1
    app.turnDict = dict()
    app.turnDict['right'] = [app.rx1,app.ry1,app.rx2,app.ry2,app.rx3,app.ry3,app.rx4,
                             app.ry4,app.rx5,app.ry5,app.rx6,app.ry6]
    app.turnDict['left'] = [app.lx1,app.ly1,app.lx2,app.ly2,app.lx3,app.ly3,app.lx4,
                             app.ly4,app.lx5,app.ly5,app.lx6,app.ly6]
    
    app.rightRectPoints = [57.4,126,520,126,520,320,57.4,320]
    app.leftRectPoints = [-520,126,323,126,323,300,-520,300]
    
    #[57.4,50,380,50,380,250,57.4,250]
    #[57.4,50,450,50,450,250,57.4,250]
    #[57.4,50,450,50,450,300,57.4,300]
    #[57.4,50,500,50,500,300,57.4,300]

#---------------------------------------------------
#first screen: welcome screen
def welcome_redrawAll(app):
    drawImage(app.imageScaled,0,0)
    drawLabel("CHAPEL CHASE", app.width//2, app.height//6.5, size = 35, 
              fill = 'gold', bold = True, font = 'Impact')
    drawLabel("Take the idol if you dare!", app.width//2, app.height//3.2, size = 19, 
              fill = 'orange', bold = True, font = 'Courier New')
    drawImage(app.imageScaled2,app.width//2.4,app.height//2.2)
    drawLabel("Press \'space\' to PLAY", app.width//2,app.height//1.3, 
              size = 18, fill = 'white', bold = True, font = 'Courier New')

def welcome_onKeyPress(app, key):
    if key == 'space':
        setActiveScreen('game')
#---------------------------------------------------
#second screen: actual game screen
def game_onStep(app):
    app.spriteCounter = (app.spriteCounter + 1) % len(app.spriteList)
    if app.gameOver:
        return
    #indexes through list in redrawAll used for jumping
    app.index = (app.index+1)%3
    #stops player from oscillating once it starts jumping
    if app.index == 2 and app.jumping == True:
        app.jumping = False
    #randomly generates obstacles
    if app.showObstacles == True:
        if random.randint(0,100) < 12:
            obstacle_x = 0
            obstacle_y = 0
            if len(app.obstacles)>0:
                newOb = Obstacle(obstacle_x,obstacle_y)
                prevOb = app.obstacles[-1]
                if (prevOb.y - (newOb.y+newOb.height))>=55:
                    app.obstacles.append(Obstacle(obstacle_x,obstacle_y))
            else:
                app.obstacles.append(Obstacle(obstacle_x,obstacle_y))
        #removes obstacles that are off screen from the list
        app.obstacles = [obstacle for obstacle in app.obstacles 
                        if obstacle.y < app.height]
        if app.jumping == False:
            listy = [0,0,0,0,0,0,0,0,0,0,0]
        else:
            listy = [0,30,60,80,90,100,90,80,60,30,0]
        #2 collision checks: either game over or player goes slower
        # if player hits small obstacle when slowed down, then game over too
        for obstacle in app.obstacles:
            if (obstacle.width==380):
                if (app.jumping==False) and ((obstacle.y + obstacle.height)
                    >=app.player_y - listy[app.index] >= (obstacle.y + obstacle.height-5)):
                    app.gameOver = True
            
            elif (obstacle.width == 192):
                if (app.jumping == False) and ((obstacle.y + obstacle.height)
                    >=app.player_y - listy[app.index] >= (obstacle.y+obstacle.height-3)):
                    if app.player_x<=(obstacle.x+obstacle.width):
                        if not app.slowedDown:
                            app.slowedDown = True
                        else:
                            app.gameOver = True
        
        if app.slowedDown:
            if app.slowCount < 40:
                app.slowCount += 1
                app.scrollObstacle = 4
            elif app.slowCount == 40:
                app.slowedDown = False
                app.slowCount = 0
                app.scrollObstacle = 7

    if app.obstacleCounter < 45:
        app.obstacleCounter+=1
    if app.obstacleCounter==45:
        app.showObstacles = False
        app.obstacleCounter = 0

    if app.turnCount<60:
        app.turnCount+=1
    if app.turnCount==60:
        app.isTurn = True
        app.startTurn = True

    if app.isTurn == True:
        if app.startTurn == True:
            turnNum = random.randint(0,4)
            if turnNum%2==0:
                app.turnPoints = copy.copy(app.turnDict['right'])
                app.direction = 'right'
            else:
                app.turnPoints = copy.copy(app.turnDict['left'])
                app.direction = 'left'
            app.startTurn = False
        if app.direction == 'right':
            if app.turnPoints[7]<app.height:
                app.turnPoints[1]+=app.scrollTurn
                app.turnPoints[3]+=app.scrollTurn
                app.turnPoints[5]+=app.scrollTurn+3
                app.turnPoints[7]+=app.scrollTurn+3
                app.turnPoints[9]+=app.scrollTurn
                app.turnPoints[11]+=app.scrollTurn
                app.turnPoints[0]-=2
                app.turnPoints[6]+=2
                app.turnPoints[8]+=2
                app.turnPoints[10]-=2
            else:
                if app.playerTurn == True:
                    app.swivel = True
                    app.startSwivel = True
                elif app.playerTurn == False:
                    app.gameOver = True
                app.playerTurn = False
                app.isTurn = False
                app.showObstacles = True
            app.turnCount = 0
        elif app.direction == 'left':
            if app.turnPoints[9] < app.height:
                app.turnPoints[1]+=app.scrollTurn
                app.turnPoints[3]+=app.scrollTurn
                app.turnPoints[5]+=app.scrollTurn
                app.turnPoints[7]+=app.scrollTurn
                app.turnPoints[9]+=app.scrollTurn+3
                app.turnPoints[11]+=app.scrollTurn+3
                app.turnPoints[2]+=2
                app.turnPoints[4]+=2
                app.turnPoints[6]-=2
                app.turnPoints[8]-=2
            else:
                if app.playerTurn == True:
                    app.swivel = True
                    app.startSwivel = True
                elif app.playerTurn == False:
                    app.gameOver = True
                app.playerTurn = False
                app.isTurn = False
                app.showObstacles = True
            app.turnCount = 0
    
    if app.swivel == True:
        if app.startSwivel == True:
            if app.direction == 'right':
                app.swivelPoints = copy.copy(app.rightRectPoints)
                app.degrees = 369
            elif app.direction == 'left':
                app.swivelPoints = copy.copy(app.leftRectPoints)
                app.degrees = -9
            app.startSwivel = False
        if app.direction == 'right':
            app.degrees-=9
            if app.swivelCount < 5:
                app.swivelCount+=1
                app.swivelPoints[1]-=13
                app.swivelPoints[7]+=12
                app.swivelPoints[3]+=5
                app.swivelPoints[5]-=7
                rotate(app.swivelPoints,app.degrees,230,250)
            else:
                app.swivelCount = 0
                app.degrees = 0
                app.swivel = False
                app.showObstacles = True

        elif app.direction == 'left':
            app.degrees+=9
            if app.swivelCount < 5:
                app.swivelCount+=1
                app.swivelPoints[5]-=(-6)
                app.swivelPoints[3]+=(-6)
                app.swivelPoints[1]-=(-3)
                app.swivelPoints[7]+=(-3)
                rotate(app.swivelPoints,app.degrees,150,250)
            else:
                app.swivelPoint = 0
                app.degrees = 0
                app.swivel = False
                app.showObstacles = True

    if app.distance_m>10:
        app.stepsPerSecond = 15
    
    if app.distance_m>20:
        app.stepsPerSecond = 20
    
    app.distance_cm+=4
    app.distance_m = app.distance_cm//100
    app.score += (app.distance_m) + 5*app.coins
    
def rotate(pointList,deg,h,k):
    rotDeg = deg
    topLx = pointList[0]
    topLy = pointList[1]
    topRx = pointList[2]
    topRy = pointList[3]
    botRx = pointList[4]
    botRy = pointList[5]
    botLx = pointList[6]
    botLy = pointList[7]
    pointList[0] = (topLx - h)*math.cos(rotDeg*math.pi/180)-(topLy-k)*math.sin(rotDeg*math.pi/180)+h
    pointList[1] = (topLx - h)*math.sin(rotDeg*math.pi/180)+(topLy-k)*math.cos(rotDeg*math.pi/180)+k
    pointList[2] = (topRx - h)*math.cos(rotDeg*math.pi/180)-(topRy-k)*math.sin(rotDeg*math.pi/180)+h
    pointList[3] = (topRx - h)*math.sin(rotDeg*math.pi/180)+(topRy-k)*math.cos(rotDeg*math.pi/180)+k
    pointList[4] = (botRx - h)*math.cos(rotDeg*math.pi/180)-(botRy-k)*math.sin(rotDeg*math.pi/180)+h
    pointList[5] = (botRx - h)*math.sin(rotDeg*math.pi/180)+(botRy-k)*math.cos(rotDeg*math.pi/180)+k
    pointList[6] = (botLx - h)*math.cos(rotDeg*math.pi/180)-(botLy-k)*math.sin(rotDeg*math.pi/180)+h
    pointList[7] = (botLx - h)*math.sin(rotDeg*math.pi/180)+(botLy-k)*math.cos(rotDeg*math.pi/180)+k
    return pointList

def game_onKeyPress(app,key):
    if key=='p':
        setActiveScreen('pause')
    if key == 'r':
        setActiveScreen('welcome')
    if key == 'space':
        if app.jumping==False:
            app.jumping = True
    if key == 'right':
        if app.direction == 'right':
            app.playerTurn = True
    if key == 'left':
        if app.direction == 'left':
            app.playerTurn = True


def game_onKeyHold(app,keys):
    if 'd' in keys:
        if app.player_x+app.playerWidth < (app.width-100):
            app.player_x = (app.width//2 - app.playerWidth//2) + 30
    if 'a' in keys:
        if app.player_x > 100:
            app.player_x = (app.width//2 - app.playerWidth//2) - 30

def game_onKeyRelease(app,key):
    app.player_x = app.width//2 - app.playerWidth//2

def game_redrawAll(app):
    if app.gameOver == False:
        #draws gif
        x, y = app.width/2, app.height/2
        drawImage(app.spriteList[app.spriteCounter], 
                  x, y, align = 'center')
        if app.isTurn == False and app.swivel == False:
            drawPolygon(app.width/3,0,(2*app.width)/3,0,320,app.height,60,app.height,
                fill = 'gray')
            
        elif app.isTurn == True:
            drawPolygon(*app.turnPoints,fill='gray')

        elif app.swivel == True:
            drawPolygon(*app.swivelPoints,fill='gray')

        #draws obstacles
        for obstacle in app.obstacles:
            obstacle.move(app.scrollObstacle)
            drawRect(obstacle.x,obstacle.y,
                     obstacle.width,obstacle.height,fill='pink')
        #draws player based on if it is jumping or not
        if app.jumping == False:
            heightList = [0,0,0,0,0,0,0,0,0,0,0]
        else:
            heightList = [0,30,60,80,90,100,90,80,60,30,0]

        drawRect(app.player_x, app.player_y - heightList[app.index], 
                app.playerWidth,app.playerHeight,fill = 'cyan')
        drawLabel(f'Distance: {app.distance_m}m', app.width//1.2,app.height//5.5,
                  fill = 'black', bold = True)
    else:
        setActiveScreen('end')
#---------------------------------------------------
#third screen: paused screen
def pause_onKeyPress(app, key):
    if key=='p':
        setActiveScreen('game')
    if key == 'r':
        setActiveScreen('welcome')
    if key == 'e':
        setActiveScreen('end')

def pause_redrawAll(app):
    drawImage(app.imageScaled3,0,0)
    drawLabel('PAUSED!', app.width//2, app.height//6, size = 36, bold = True, 
              fill = 'white', font = 'Courier New')
    drawLabel('Press \'e\' to end.', app.width//2, app.height//3, size = 20,
               bold = True, fill = 'gold', font = 'Courier New')
    drawLabel('Press \'p\' to continue.', app.width//2, app.height//2, size = 20,
               bold = True, fill = 'gold', font = 'Courier New')
    drawLabel('Press \'r\' to restart.', app.width//2, app.height//1.5, size = 20,
               bold = True, fill = 'gold', font = 'Courier New')
               
    drawLabel(f'Current Score: {app.score}',app.width//2,app.height//1.2,
              size = 20, bold = True, fill = 'red', font = 'Courier New')

#---------------------------------------------------
#fourth screen: game over screen

def end_redrawAll(app):
    drawRect(0,0,app.width,app.height,fill='gray')
    drawImage(app.imageScaled4,app.width//3.32,app.height//30)
    drawLabel(f'SCORE:      {app.score}',app.width//2.1,app.height//1.9, 
              size = 25,bold = True, fill = 'gold',font = 'Impact')
    drawLabel(f'Distance: {app.distance_m}m',app.width//2.1,app.height//1.5,
              size = 20, bold = True, fill = 'orange', font = 'Courier')
    drawLabel(f'Coins: {app.coins}',app.width//2.1,app.height//1.3,
              size = 20, bold = True, fill = 'white', font = 'Courier')

runAppWithScreens(width = 380, height = 250, initialScreen='welcome')
